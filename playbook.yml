---
- name: Preparing Workstation
  hosts: localhost # // TODO: para o teste com molecule precisava ser "all"
  connection: local
  gather_facts: yes # default=yes
  tasks:

    # https://docs.ansible.com/ansible/2.9/modules/dnf_module.html#dnf-module
    - name: Update all packages (like dnf update command)
      become: true
      ansible.builtin.dnf:
        name: '*'
        state: latest # noqa: package-latest (https://ansible-lint.readthedocs.io/usage/#muting-warnings-to-avoid-false-positives)
        update_cache: yes

    - name: Install python3-ansible-lint
      become: true
      ansible.builtin.dnf:
        name:
          - python3-ansible-lint
        state: present

    ###########################################################################
    #### Instalar o ZSH
    ###########################################################################

    - name: Install zsh and expect
      become: true
      ansible.builtin.dnf:
        name:
          - zsh
          - expect
        state: present

    - name: Change user shell to zsh
      become: true
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        shell: /usr/bin/zsh

    - name: Check if ~/.zshrc file exists
      ansible.builtin.stat:
        path: ~/.zshrc
      register: zshrc_file

    - name: Zsh config wizard
      when: not zshrc_file.stat.exists
      ansible.builtin.shell: |
        set timeout 5
        spawn zsh

        expect "This is the Z Shell configuration function for new users"
        send -- "1"

        expect "(1)  Configure settings for history, i.e. command lines remembered"
        send -- "1"

        expect "# (1) Number of lines of history kept within the shell."
        send -- "1"

        expect "HISTSIZE> "
        send -- \025
        send -- "999999999\r"

        expect "# (3) Number of lines of history to save to \$HISTFILE."
        send -- "3"

        expect "SAVEHIST> "
        send -- \025
        send -- "999999999\r"

        expect "History configuration"
        send -- "0"

        expect "(0)  Exit, saving the new settings.  They will take effect immediately."
        send -- "0"

        expect "The function will not be run in future, but you can run"
        send -- "exit\r"

        expect eof
      args:
        executable: /usr/bin/expect

    ###########################################################################
    #### Instalar o ASDF - https://asdf-vm.com/guide/getting-started.html
    ###########################################################################

    - name: Install python3-pip
      become: true
      ansible.builtin.dnf:
        name:
          - python3-pip
        state: present

    - name: Instalar github3.py com pip
      ansible.builtin.pip:
        name: github3.py
        state: present

    - name: Recuperar informações da última release do asdf
      community.general.github_release:
        user: asdf-vm
        repo: asdf
        action: latest_release
      register: asdf_latest_release

    - name: Debug
      ansible.builtin.debug:
        msg: "A última release do ASDF é: {{ asdf_latest_release }}"

    - name: Clonar o repositório do asdf-vm
      ansible.builtin.git:
        repo: https://github.com/asdf-vm/asdf.git
        dest: ~/.asdf
        version: "{{ asdf_latest_release.tag }}"

    # - name: Adicionando linha no arquivo ~/.zshrc, se ainda não existir
    #   ansible.builtin.lineinfile:
    #     path: ~/.zshrc
    #     line: '. "$HOME/.asdf/asdf.sh"'
    #     state: present
    #     backup: yes

    - name: Adicionando linha no arquivo ~/.zshrc, se ainda não existir
      ansible.builtin.blockinfile:
        path: ~/.zshrc
        backup: yes
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        marker_begin: BEGIN_ASDF
        marker_end: END_ASDF
        # // TODO: conforme a documentação "ZSH & Git" em https://asdf-vm.com/guide/getting-started.html#_3-install-asdf
        # as linhas do fpath e autoload podem ser substituídas pelo plugin zsdf do oh-my-zsh
        block: |
          . "$HOME/.asdf/asdf.sh"
          # append completions to fpath
          fpath=(${ASDF_DIR}/completions $fpath)
          # initialise completions with ZSH's compinit
          autoload -Uz compinit && compinit
